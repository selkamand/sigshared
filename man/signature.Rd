% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assertions.R, R/example_data.R
\name{assert_signature}
\alias{assert_signature}
\alias{signature}
\alias{example_signature}
\alias{example_signature_empty}
\title{Assert object represents a signature}
\usage{
assert_signature(
  obj,
  must_sum_to_one = TRUE,
  msg = NULL,
  call = rlang::caller_env(),
  arg_name = NULL
)

example_signature()

example_signature_empty()
}
\arguments{
\item{obj}{object}

\item{must_sum_to_one}{throw an error if the fraction column of the signature data.frame does NOT sum to one.}

\item{msg}{error message}

\item{call}{internal paramater}

\item{arg_name}{argument}
}
\value{
Throws error if assertion fails, otherwise invisibly returns true

A data.frame representing a valid exemplar signature signature in the 'sigverse' format.
}
\description{
\strong{Signature}: A mutational signature profile represented as a \code{data.frame} with the following 3 columns:
\itemize{
\item \code{type}: The type of mutation (e.g., A>G, C>T).
\item \code{channel}: The mutational channel (e.g., A\[A->G\]G, C\[C->T\]G).
\item \code{fraction}: The fraction of mutations attributed to this specific type and channel.
}

This function returns an exemplar signature with valid data following the 'sigverse' style.
}
\details{
See \url{https://github.com/selkamand/sigshared} for full descriptions of filetypes
}
\examples{

if(interactive()){

  # Generate Example Datatypes
  # Signatures
  signature = example_signature()
  signature_collection = example_signature_collection()
  signature_annotations = example_signature_annotations()
  signature_bootstraps = example_bootstraps()


  # Catalogues
  catalogue = example_catalogue()
  catalogue_collection = example_catalogue_collection()

  # Cohort Analysis Results
  cohort_analysis = example_cohort_analysis()

  # Cohort Analysis Results
  catalogue_collection = example_catalogue_collection()

  # Cohort Metadata
  cohort_metadata = example_cohort_metadata()

  # Run Assertions
  assert_signature(signature)
  assert_signature_collection(signature_collection)
  assert_catalogue(catalogue)
  assert_catalogue_collection(catalogue_collection)
  assert_cohort_analysis(cohort_analysis)
  assert_cohort_metadata(cohort_metadata)
}



# Return a valid signature
example_signature()

# Return a valid but empty signature (all fraction values are 0)
example_signature_empty()
}
